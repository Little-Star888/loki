---
# Source: loki/templates/bloom-builder/poddisruptionbudget-bloom-builder.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: enterprise-logs-bloom-builder
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: bloom-builder
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: enterprise-logs
      app.kubernetes.io/instance: enterprise-logs
      app.kubernetes.io/component: bloom-builder
  maxUnavailable: 1
---
# Source: loki/templates/chunks-cache/poddisruptionbudget-chunks-cache.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: enterprise-logs-memcached-chunks-cache
  namespace: logs
  labels:
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/component: memcached-chunks-cache
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: enterprise-logs
      app.kubernetes.io/instance: enterprise-logs
      app.kubernetes.io/component: memcached-chunks-cache
  maxUnavailable: 1
---
# Source: loki/templates/distributor/poddisruptionbudget-distributor.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: enterprise-logs-distributor
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: distributor
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: enterprise-logs
      app.kubernetes.io/instance: enterprise-logs
      app.kubernetes.io/component: distributor
  maxUnavailable: 1
---
# Source: loki/templates/gateway/poddisruptionbudget-gateway.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: enterprise-logs-gateway
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: gateway
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: enterprise-logs
      app.kubernetes.io/instance: enterprise-logs
      app.kubernetes.io/component: gateway
  maxUnavailable: 1
---
# Source: loki/templates/index-gateway/poddisruptionbudget-index-gateway.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: enterprise-logs-index-gateway
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: index-gateway
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: enterprise-logs
      app.kubernetes.io/instance: enterprise-logs
      app.kubernetes.io/component: index-gateway
  maxUnavailable: 1
---
# Source: loki/templates/ingester/poddisruptionbudget-ingester.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: enterprise-logs-ingester
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: ingester
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: enterprise-logs
      app.kubernetes.io/instance: enterprise-logs
      app.kubernetes.io/component: ingester
    
    matchExpressions:
      - key: rollout-group
        operator: NotIn
        values:
          - 'ingester'
  maxUnavailable: 1
---
# Source: loki/templates/querier/poddisruptionbudget-querier.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: enterprise-logs-querier
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: querier
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: enterprise-logs
      app.kubernetes.io/instance: enterprise-logs
      app.kubernetes.io/component: querier
  maxUnavailable: 2
---
# Source: loki/templates/query-frontend/poddisruptionbudget-query-frontend.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: enterprise-logs-query-frontend
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: query-frontend
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: enterprise-logs
      app.kubernetes.io/instance: enterprise-logs
      app.kubernetes.io/component: query-frontend
  maxUnavailable: 1
---
# Source: loki/templates/query-scheduler/poddisruptionbudget-query-scheduler.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: enterprise-logs-query-scheduler
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: query-scheduler
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: enterprise-logs
      app.kubernetes.io/instance: enterprise-logs
      app.kubernetes.io/component: query-scheduler
  maxUnavailable: 1
---
# Source: loki/templates/results-cache/poddisruptionbudget-results-cache.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: enterprise-logs-memcached-results-cache
  namespace: logs
  labels:
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/component: memcached-results-cache
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: enterprise-logs
      app.kubernetes.io/instance: enterprise-logs
      app.kubernetes.io/component: memcached-results-cache
  maxUnavailable: 1
---
# Source: loki/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: enterprise-logs
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
automountServiceAccountToken: true
---
# Source: loki/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: enterprise-logs
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
data:
  config.yaml: |
    
    admin_client:
      storage:
        backend: s3
        s3:
          bucket_name: enterprise-logs-admin
    analytics:
      reporting_enabled: true
    auth:
      type: enterprise
    auth_enabled: true
    bloom_build:
      builder:
        planner_address: enterprise-logs-bloom-planner-headless.logs.svc.cluster.local:9095
      enabled: true
    bloom_gateway:
      client:
        addresses: dnssrvnoa+_grpc._tcp.enterprise-logs-bloom-gateway-headless.logs.svc.cluster.local
      enabled: true
    chunk_store_config:
      chunk_cache_config:
        background:
          writeback_buffer: 500000
          writeback_goroutines: 1
          writeback_size_limit: 500MB
        default_validity: 0s
        memcached:
          batch_size: 4
          parallelism: 5
        memcached_client:
          addresses: dnssrvnoa+_memcached-client._tcp.enterprise-logs-chunks-cache.logs.svc
          consistent_hash: true
          max_idle_conns: 72
          timeout: 2000ms
    cluster_name: enterprise-logs
    common:
      compactor_address: 'http://enterprise-logs-compactor:3100'
      path_prefix: /var/loki
      replication_factor: 3
      storage:
        s3:
          access_key_id: enterprise-logs
          bucketnames: enterprise-logs-chunks
          endpoint: minio.logs.svc.cluster.local:9000
          insecure: true
          s3forcepathstyle: true
          secret_access_key: supersecret
    distributor:
      write_failures_logging:
        add_insights_label: true
    frontend:
      compress_responses: true
      encoding: protobuf
      log_queries_longer_than: 5s
      log_query_request_headers: ""
      max_outstanding_per_tenant: 10000
      querier_forget_delay: 1m
      query_stats_enabled: true
      scheduler_address: enterprise-logs-query-scheduler.logs.svc.cluster.local:9095
      scheduler_worker_concurrency: 120
      tail_proxy_url: http://enterprise-logs-querier.logs.svc.cluster.local:3100
    frontend_worker:
      grpc_client_config:
        grpc_compression: snappy
        max_send_msg_size: 104857600
      scheduler_address: enterprise-logs-query-scheduler.logs.svc.cluster.local:9095
    index_gateway:
      mode: ring
    ingester:
      autoforget_unhealthy: true
      chunk_idle_period: 1h
      chunk_retain_period: 15m
      flush_op_timeout: 30s
      sync_min_utilization: 0.2
      sync_period: 15m
      wal:
        replay_memory_ceiling: 7GB
    ingester_client:
      grpc_client_config:
        grpc_compression: snappy
        max_recv_msg_size: 67108864
      remote_timeout: 1s
    license:
      path: /etc/loki/license/license.jwt
    limits_config:
      allow_structured_metadata: true
      blocked_queries: []
      cardinality_limit: 100000
      increment_duplicate_timestamp: true
      index_gateway_shard_size: 3
      ingestion_burst_size_mb: 20
      ingestion_rate_mb: 10
      ingestion_rate_strategy: global
      max_cache_freshness_per_query: 10m
      max_chunks_per_query: 2000000
      max_concurrent_tail_requests: 5
      max_entries_limit_per_query: 5000
      max_global_streams_per_user: 80000
      max_label_name_length: 256
      max_label_names_per_series: 15
      max_label_value_length: 1024
      max_line_size: 262144
      max_line_size_truncate: true
      max_query_bytes_read: 2TB
      max_query_range: 30d1h
      max_stats_cache_freshness: 30d
      max_streams_matchers_per_query: 128
      max_streams_per_user: 0
      minimum_labels_number: 2
      per_stream_rate_limit: 5MB
      query_ready_index_num_days: 14
      query_timeout: 1m
      reject_old_samples: true
      reject_old_samples_max_age: 1w
      required_labels: []
      retention_period: 30d
      retention_stream:
      - period: 25h
        selector: '{retention="1d"}'
      - period: 61d
        selector: '{retention="60d"}'
      - period: 91d
        selector: '{retention="90d"}'
      - period: 121d
        selector: '{retention="120d"}'
      - period: 366d
        selector: '{retention="1y"}'
      ruler_max_rules_per_rule_group: 15
      shard_streams:
        desired_rate: 512KB
        enabled: true
      split_queries_by_interval: 1h
      tsdb_max_query_parallelism: 512
      volume_enabled: true
      volume_max_series: 100000000
    memberlist:
      join_members:
      - enterprise-logs-memberlist
    pattern_ingester:
      enabled: true
    querier:
      max_concurrent: 4
      multi_tenant_queries_enabled: false
      query_ingesters_within: 4h
    query_range:
      align_queries_with_step: true
      cache_instant_metric_results: true
      cache_results: true
      instant_metric_query_split_align: true
      parallelise_shardable_queries: true
      results_cache:
        cache:
          background:
            writeback_buffer: 500000
            writeback_goroutines: 1
            writeback_size_limit: 500MB
          default_validity: 12h
          memcached_client:
            addresses: dnssrvnoa+_memcached-client._tcp.enterprise-logs-results-cache.logs.svc
            consistent_hash: true
            timeout: 500ms
            update_interval: 1m
      shard_aggregations: quantile_over_time,first_over_time,last_over_time
    query_scheduler:
      grpc_client_config:
        grpc_compression: snappy
      max_outstanding_requests_per_tenant: 32000
      querier_forget_delay: 1m
    ruler:
      query_stats_enabled: true
      ruler_client:
        grpc_compression: snappy
      storage:
        s3:
          access_key_id: enterprise-logs
          bucketnames: enterprise-logs-ruler
          endpoint: minio.logs.svc.cluster.local:9000
          insecure: true
          s3forcepathstyle: true
          secret_access_key: supersecret
        type: s3
      wal:
        dir: /var/loki/ruler-wal
    runtime_config:
      file: /etc/loki/runtime-config/runtime-config.yaml
    schema_config:
      configs:
      - chunks:
          period: 0s
          prefix: ""
          tags: {}
        from: "2024-04-01"
        index:
          period: 1d
          prefix: tsdb_index_
          tags: {}
        object_store: s3
        row_shards: 16
        schema: v13
        store: tsdb
    server:
      graceful_shutdown_timeout: 5s
      grpc_listen_port: 9095
      grpc_server_max_concurrent_streams: 1000
      grpc_server_max_recv_msg_size: 20971520
      grpc_server_max_send_msg_size: 20971520
      http_listen_port: 3100
      http_server_read_timeout: 2m
      http_server_write_timeout: 1m
    storage_config:
      bloom_shipper:
        working_directory: /var/loki/data/bloomshipper
      boltdb_shipper:
        index_gateway_client:
          server_address: dns+enterprise-logs-index-gateway-headless.logs.svc.cluster.local:9095
      hedging:
        at: 250ms
        max_per_second: 20
        up_to: 3
      tsdb_shipper:
        index_gateway_client:
          grpc_client_config:
            grpc_compression: snappy
          server_address: dns+enterprise-logs-index-gateway-headless.logs.svc.cluster.local:9095
    tracing:
      enabled: true
---
# Source: loki/templates/runtime-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: enterprise-logs-runtime
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
data:
  runtime-config.yaml: |
    {}
---
# Source: loki/templates/backend/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
  name: enterprise-logs-clusterrole
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["configmaps", "secrets"]
  verbs: ["get", "watch", "list"]
---
# Source: loki/templates/backend/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: enterprise-logs-clusterrolebinding
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
subjects:
  - kind: ServiceAccount
    name: enterprise-logs
    namespace: logs
roleRef:
  kind: ClusterRole
  name: enterprise-logs-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
# Source: loki/templates/admin-api/service-admin-api.yaml
apiVersion: v1
kind: Service
metadata:
  name: enterprise-logs-admin-api
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: admin-api
    target: admin-api
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: http-metrics
      port: 3100
      protocol: TCP
      targetPort: http-metrics
    - name: grpc
      port: 9095
      protocol: TCP
      targetPort: grpc
  selector:
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/component: admin-api
    target: admin-api
---
# Source: loki/templates/bloom-builder/service-bloom-builder.yaml
apiVersion: v1
kind: Service
metadata:
  name: enterprise-logs-bloom-builder
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: bloom-builder
  annotations:
spec:
  type: ClusterIP
  publishNotReadyAddresses: true
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
    - name: grpclb
      port: 9096
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/component: bloom-builder
---
# Source: loki/templates/bloom-gateway/service-bloom-gateway-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: enterprise-logs-bloom-gateway-headless
  namespace: logs
  labels:
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/component: bloom-gateway
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/component: bloom-gateway
---
# Source: loki/templates/bloom-planner/service-bloom-planner-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: enterprise-logs-bloom-planner-headless
  namespace: logs
  labels:
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/component: bloom-planner
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/component: bloom-planner
---
# Source: loki/templates/chunks-cache/service-chunks-cache-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: enterprise-logs-chunks-cache
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: "memcached-chunks-cache"
  annotations:
    {}
  namespace: "logs"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: memcached-client
      port: 11211
      targetPort: 11211
    - name: http-metrics
      port: 9150
      targetPort: 9150
    
  selector:
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/component: "memcached-chunks-cache"
---
# Source: loki/templates/compactor/service-compactor.yaml
apiVersion: v1
kind: Service
metadata:
  name: enterprise-logs-compactor
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: compactor
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/component: compactor
---
# Source: loki/templates/distributor/service-distributor-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: enterprise-logs-distributor-headless
  namespace: logs
  labels:
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/component: distributor
    variant: headless
    prometheus.io/service-monitor: "false"
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/component: distributor
---
# Source: loki/templates/distributor/service-distributor.yaml
apiVersion: v1
kind: Service
metadata:
  name: enterprise-logs-distributor
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: distributor
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/component: distributor
---
# Source: loki/templates/gateway/service-gateway.yaml
apiVersion: v1
kind: Service
metadata:
  name: enterprise-logs-gateway
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: gateway
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: http-metrics
      port: 80
      targetPort: http-metrics
      protocol: TCP
  selector:
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/component: gateway
---
# Source: loki/templates/index-gateway/service-index-gateway-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: enterprise-logs-index-gateway-headless
  namespace: logs
  labels:
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/component: index-gateway
    prometheus.io/service-monitor: "false"
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/component: index-gateway
---
# Source: loki/templates/index-gateway/service-index-gateway.yaml
apiVersion: v1
kind: Service
metadata:
  name: enterprise-logs-index-gateway
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: index-gateway
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/component: index-gateway
---
# Source: loki/templates/ingester/service-ingester-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: enterprise-logs-ingester-headless
  namespace: logs
  labels:
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/component: ingester
    prometheus.io/service-monitor: "false"
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/component: ingester
---
# Source: loki/templates/ingester/service-ingester.yaml
apiVersion: v1
kind: Service
metadata:
  name: enterprise-logs-ingester
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: ingester
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/component: ingester
---
# Source: loki/templates/overrides-exporter/service-overrides-exporter-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: enterprise-logs-overrides-exporter-headless
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: overrides-exporter
    prometheus.io/service-monitor: "false"
  annotations:
spec:
  clusterIP: None
  type: ClusterIP
  publishNotReadyAddresses: true
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
    - name: grpclb
      port: 9096
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/component: overrides-exporter
---
# Source: loki/templates/overrides-exporter/service-overrides-exporter.yaml
apiVersion: v1
kind: Service
metadata:
  name: enterprise-logs-overrides-exporter
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: overrides-exporter
  annotations:
spec:
  type: ClusterIP
  publishNotReadyAddresses: true
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
    - name: grpclb
      port: 9096
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/component: overrides-exporter
---
# Source: loki/templates/querier/service-querier.yaml
apiVersion: v1
kind: Service
metadata:
  name: enterprise-logs-querier
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: querier
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/component: querier
---
# Source: loki/templates/query-frontend/service-query-frontend-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: enterprise-logs-query-frontend-headless
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: query-frontend
    prometheus.io/service-monitor: "false"
  annotations:
spec:
  clusterIP: None
  type: ClusterIP
  publishNotReadyAddresses: true
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
    - name: grpclb
      port: 9096
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/component: query-frontend
---
# Source: loki/templates/query-frontend/service-query-frontend.yaml
apiVersion: v1
kind: Service
metadata:
  name: enterprise-logs-query-frontend
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: query-frontend
  annotations:
spec:
  type: ClusterIP
  publishNotReadyAddresses: true
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
    - name: grpclb
      port: 9096
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/component: query-frontend
---
# Source: loki/templates/query-scheduler/service-query-scheduler.yaml
apiVersion: v1
kind: Service
metadata:
  name: enterprise-logs-query-scheduler
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: query-scheduler
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpclb
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/component: query-scheduler
---
# Source: loki/templates/results-cache/service-results-cache-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: enterprise-logs-results-cache
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: "memcached-results-cache"
  annotations:
    {}
  namespace: "logs"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: memcached-client
      port: 11211
      targetPort: 11211
    - name: http-metrics
      port: 9150
      targetPort: 9150
    
  selector:
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/component: "memcached-results-cache"
---
# Source: loki/templates/ruler/service-ruler.yaml
apiVersion: v1
kind: Service
metadata:
  name: enterprise-logs-ruler
  namespace: logs
  labels:
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/component: ruler
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http-metrics
      port: 3100
      targetPort: http-metrics
      protocol: TCP
    - name: grpc
      port: 9095
      targetPort: grpc
      protocol: TCP
  selector:
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/component: ruler
---
# Source: loki/templates/service-memberlist.yaml
apiVersion: v1
kind: Service
metadata:
  name: enterprise-logs-memberlist
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
  annotations:
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp
      port: 7946
      targetPort: http-memberlist
      protocol: TCP
  selector:
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/part-of: memberlist
---
# Source: loki/templates/admin-api/deployment-admin-api.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: enterprise-logs-admin-api
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: admin-api
    target: admin-api
    app.kubernetes.io/part-of: memberlist
  annotations:
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: enterprise-logs
      app.kubernetes.io/instance: enterprise-logs
      app.kubernetes.io/component: admin-api
      target: admin-api
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: enterprise-logs
        app.kubernetes.io/instance: enterprise-logs
        app.kubernetes.io/component: admin-api
        target: admin-api
        app.kubernetes.io/part-of: memberlist
      annotations:
        checksum/config: d14c236145af3218e02fe7afb1c2da5ecb71e18d152f4d92f607f52fda437995
    spec:
      serviceAccountName: enterprise-logs
      securityContext:
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      initContainers:
        # Taken from
        # https://github.com/minio/charts/blob/a5c84bcbad884728bff5c9c23541f936d57a13b3/minio/templates/post-install-create-bucket-job.yaml
      containers:
        - name: admin-api
          image: "docker.io/grafana/enterprise-logs:3.3.0"
          imagePullPolicy: IfNotPresent
          args:
            - -target=admin-api
            - -config.file=/etc/loki/config/config.yaml
          volumeMounts:
            - name: config
              mountPath: /etc/loki/config
            - name: license
              mountPath: /etc/loki/license
            - name: storage
              mountPath: /data
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: http-memberlist
              containerPort: 7946
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          env:
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      terminationGracePeriodSeconds: 60
      volumes:
        - name: config
          configMap:
            name: enterprise-logs
            items:
              - key: "config.yaml"
                path: "config.yaml"
        - name: license
          secret:
            secretName: gel-license
        - name: storage
          emptyDir: {}
---
# Source: loki/templates/bloom-builder/deployment-bloom-builder.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: enterprise-logs-bloom-builder
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: bloom-builder
spec:
  replicas: 2
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: enterprise-logs
      app.kubernetes.io/instance: enterprise-logs
      app.kubernetes.io/component: bloom-builder
  template:
    metadata:
      annotations:
        checksum/config: d14c236145af3218e02fe7afb1c2da5ecb71e18d152f4d92f607f52fda437995
      labels:
        app.kubernetes.io/name: enterprise-logs
        app.kubernetes.io/instance: enterprise-logs
        app.kubernetes.io/component: bloom-builder
        app.kubernetes.io/part-of: memberlist
    spec:
      serviceAccountName: enterprise-logs
      
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 30
      containers:
        - name: bloom-builder
          image: docker.io/grafana/enterprise-logs:3.3.0
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/loki/config/config.yaml
            - -target=bloom-builder
            - -config.expand-env=true
            - -log-config-reverse-order
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: http-memberlist
              containerPort: 7946
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 30
            timeoutSeconds: 1
          volumeMounts:
            - name: config
              mountPath: /etc/loki/config
            - name: runtime-config
              mountPath: /etc/loki/runtime-config
            - name: license
              mountPath: /etc/loki/license
            - name: temp
              mountPath: /tmp
            - name: data
              mountPath: /var/loki
          resources:
            {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/component: bloom-builder
            topologyKey: kubernetes.io/hostname
      volumes:
        - name: config
          configMap:
            name: enterprise-logs
            items:
              - key: "config.yaml"
                path: "config.yaml"
        - name: runtime-config
          configMap:
            name: enterprise-logs-runtime
        - name: license
          secret:
            secretName: gel-license
        - name: temp
          emptyDir: {}
        - name: data
          emptyDir: {}
---
# Source: loki/templates/distributor/deployment-distributor.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: enterprise-logs-distributor
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: distributor
    app.kubernetes.io/part-of: memberlist
spec:
  replicas: 2
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: enterprise-logs
      app.kubernetes.io/instance: enterprise-logs
      app.kubernetes.io/component: distributor
  template:
    metadata:
      annotations:
        checksum/config: d14c236145af3218e02fe7afb1c2da5ecb71e18d152f4d92f607f52fda437995
      labels:
        app.kubernetes.io/name: enterprise-logs
        app.kubernetes.io/instance: enterprise-logs
        app.kubernetes.io/component: distributor
        app.kubernetes.io/part-of: memberlist
    spec:
      serviceAccountName: enterprise-logs
      
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 30
      containers:
        - name: distributor
          image: docker.io/grafana/enterprise-logs:3.3.0
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/loki/config/config.yaml
            - -target=distributor
            - -config.expand-env=true
            - -log-config-reverse-order
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: http-memberlist
              containerPort: 7946
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 30
            timeoutSeconds: 1
          livenessProbe:
            null
          volumeMounts:
            - name: config
              mountPath: /etc/loki/config
            - name: runtime-config
              mountPath: /etc/loki/runtime-config
            - name: license
              mountPath: /etc/loki/license
          resources:
            limits:
              memory: 1Gi
            requests:
              cpu: 500m
              memory: 1Gi
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/component: distributor
            topologyKey: kubernetes.io/hostname
      volumes:
        - name: config
          configMap:
            name: enterprise-logs
            items:
              - key: "config.yaml"
                path: "config.yaml"
        - name: runtime-config
          configMap:
            name: enterprise-logs-runtime
        - name: license
          secret:
            secretName: gel-license
---
# Source: loki/templates/gateway/deployment-gateway-enterprise.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: enterprise-logs-gateway
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: gateway
  annotations:
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: enterprise-logs
      app.kubernetes.io/instance: enterprise-logs
      app.kubernetes.io/component: gateway
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: enterprise-logs
        app.kubernetes.io/instance: enterprise-logs
        app.kubernetes.io/component: gateway
      annotations:
        checksum/config: d14c236145af3218e02fe7afb1c2da5ecb71e18d152f4d92f607f52fda437995
    spec:    
      serviceAccountName: enterprise-logs
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      initContainers:
        []
      containers:
        - name: gateway
          image: "docker.io/grafana/enterprise-logs:3.3.0"
          imagePullPolicy: IfNotPresent
          args:
            - -target=gateway
            - -config.file=/etc/loki/config/config.yaml
            - -gateway.proxy.default.url=http://enterprise-logs-admin-api.logs.svc:3100
            - -gateway.proxy.admin-api.url=http://enterprise-logs-admin-api.logs.svc:3100
            - -gateway.proxy.distributor.url=dns:///enterprise-logs-distributor-headless.logs.svc:9095
            - -gateway.proxy.ingester.url=http://enterprise-logs-ingester.logs.svc:3100
            - -gateway.proxy.query-frontend.url=http://enterprise-logs-query-frontend.logs.svc:3100
            - -gateway.proxy.ruler.url=http://enterprise-logs-ruler.logs.svc:3100
          volumeMounts:
            - name: config
              mountPath: /etc/loki/config
            - name: license
              mountPath: /etc/loki/license
            - name: storage
              mountPath: /data
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            limits:
              memory: 1Gi
            requests:
              cpu: 500m
              memory: 1Gi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          env:
      nodeSelector:
        {}
      affinity:
        {}
      tolerations:
        []
      terminationGracePeriodSeconds: 60
      volumes:
        - name: config
          configMap:
            name: enterprise-logs
            items:
              - key: "config.yaml"
                path: "config.yaml"
        - name: license
          secret:
            secretName: gel-license
        - name: storage
          emptyDir: {}
---
# Source: loki/templates/overrides-exporter/deployment-overrides-exporter.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: enterprise-logs-overrides-exporter
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: overrides-exporter
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: enterprise-logs
      app.kubernetes.io/instance: enterprise-logs
      app.kubernetes.io/component: overrides-exporter
  template:
    metadata:
      annotations:
        checksum/config: d14c236145af3218e02fe7afb1c2da5ecb71e18d152f4d92f607f52fda437995
      labels:
        app.kubernetes.io/name: enterprise-logs
        app.kubernetes.io/instance: enterprise-logs
        app.kubernetes.io/component: overrides-exporter
        app.kubernetes.io/part-of: memberlist
    spec:
      serviceAccountName: enterprise-logs
      
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 300
      containers:
        - name: overrides-exporter
          image: docker.io/grafana/enterprise-logs:3.3.0
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/loki/config/config.yaml
            - -target=overrides-exporter
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: http-memberlist
              containerPort: 7946
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 30
            timeoutSeconds: 1
          volumeMounts:
            - name: config
              mountPath: /etc/loki/config
            - name: runtime-config
              mountPath: /etc/loki/runtime-config
            - name: license
              mountPath: /etc/loki/license
          resources:
            {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/component: overrides-exporter
            topologyKey: kubernetes.io/hostname
      volumes:
        - name: config
          configMap:
            name: enterprise-logs
            items:
              - key: "config.yaml"
                path: "config.yaml"
        - name: runtime-config
          configMap:
            name: enterprise-logs-runtime
        - name: license
          secret:
            secretName: gel-license
---
# Source: loki/templates/querier/deployment-querier.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: enterprise-logs-querier
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: querier
    app.kubernetes.io/part-of: memberlist
spec:
  replicas: 3
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: enterprise-logs
      app.kubernetes.io/instance: enterprise-logs
      app.kubernetes.io/component: querier
  template:
    metadata:
      annotations:
        checksum/config: d14c236145af3218e02fe7afb1c2da5ecb71e18d152f4d92f607f52fda437995
      labels:
        app.kubernetes.io/name: enterprise-logs
        app.kubernetes.io/instance: enterprise-logs
        app.kubernetes.io/component: querier
        app.kubernetes.io/part-of: memberlist
    spec:
      topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: querier
          maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
      serviceAccountName: enterprise-logs
      
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 30
      containers:
        - name: querier
          image: docker.io/grafana/enterprise-logs:3.3.0
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/loki/config/config.yaml
            - -target=querier
            - -config.expand-env=true
            - -log-config-reverse-order
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: http-memberlist
              containerPort: 7946
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 30
            timeoutSeconds: 1
          livenessProbe:
            null
          volumeMounts:
            - name: config
              mountPath: /etc/loki/config
            - name: runtime-config
              mountPath: /etc/loki/runtime-config
            - name: data
              mountPath: /var/loki
            - name: license
              mountPath: /etc/loki/license
          resources:
            limits:
              memory: 1Gi
            requests:
              cpu: 500m
              memory: 1Gi
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/component: querier
            topologyKey: kubernetes.io/hostname
      volumes:
        - name: config
          configMap:
            name: enterprise-logs
            items:
              - key: "config.yaml"
                path: "config.yaml"
        - name: runtime-config
          configMap:
            name: enterprise-logs-runtime
        - name: license
          secret:
            secretName: gel-license
        - name: data
          emptyDir: {}
---
# Source: loki/templates/query-frontend/deployment-query-frontend.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: enterprise-logs-query-frontend
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: query-frontend
spec:
  replicas: 2
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: enterprise-logs
      app.kubernetes.io/instance: enterprise-logs
      app.kubernetes.io/component: query-frontend
  template:
    metadata:
      annotations:
        checksum/config: d14c236145af3218e02fe7afb1c2da5ecb71e18d152f4d92f607f52fda437995
      labels:
        app.kubernetes.io/name: enterprise-logs
        app.kubernetes.io/instance: enterprise-logs
        app.kubernetes.io/component: query-frontend
        app.kubernetes.io/part-of: memberlist
    spec:
      serviceAccountName: enterprise-logs
      
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 30
      containers:
        - name: query-frontend
          image: docker.io/grafana/enterprise-logs:3.3.0
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/loki/config/config.yaml
            - -target=query-frontend
            - -config.expand-env=true
            - -log-config-reverse-order
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: http-memberlist
              containerPort: 7946
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 30
            timeoutSeconds: 1
          volumeMounts:
            - name: config
              mountPath: /etc/loki/config
            - name: runtime-config
              mountPath: /etc/loki/runtime-config
            - name: license
              mountPath: /etc/loki/license
          resources:
            limits:
              memory: 1Gi
            requests:
              cpu: 500m
              memory: 1Gi
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/component: query-frontend
            topologyKey: kubernetes.io/hostname
      volumes:
        - name: config
          configMap:
            name: enterprise-logs
            items:
              - key: "config.yaml"
                path: "config.yaml"
        - name: runtime-config
          configMap:
            name: enterprise-logs-runtime
        - name: license
          secret:
            secretName: gel-license
---
# Source: loki/templates/query-scheduler/deployment-query-scheduler.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: enterprise-logs-query-scheduler
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: query-scheduler
spec:
  replicas: 2
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: enterprise-logs
      app.kubernetes.io/instance: enterprise-logs
      app.kubernetes.io/component: query-scheduler
  template:
    metadata:
      annotations:
        checksum/config: d14c236145af3218e02fe7afb1c2da5ecb71e18d152f4d92f607f52fda437995
      labels:
        app.kubernetes.io/name: enterprise-logs
        app.kubernetes.io/instance: enterprise-logs
        app.kubernetes.io/component: query-scheduler
        app.kubernetes.io/part-of: memberlist
    spec:
      serviceAccountName: enterprise-logs
      
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 30
      containers:
        - name: query-scheduler
          image: docker.io/grafana/enterprise-logs:3.3.0
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/loki/config/config.yaml
            - -target=query-scheduler
            - -config.expand-env=true
            - -log-config-reverse-order
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: http-memberlist
              containerPort: 7946
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 30
            timeoutSeconds: 1
          livenessProbe:
            null
          volumeMounts:
            - name: config
              mountPath: /etc/loki/config
            - name: runtime-config
              mountPath: /etc/loki/runtime-config
            - name: license
              mountPath: /etc/loki/license
          resources:
            limits:
              memory: 1Gi
            requests:
              cpu: 500m
              memory: 1Gi
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/component: query-scheduler
            topologyKey: kubernetes.io/hostname
      volumes:
        - name: config
          configMap:
            name: enterprise-logs
            items:
              - key: "config.yaml"
                path: "config.yaml"
        - name: runtime-config
          configMap:
            name: enterprise-logs-runtime
        - name: license
          secret:
            secretName: gel-license
---
# Source: loki/templates/bloom-gateway/statefulset-bloom-gateway.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: enterprise-logs-bloom-gateway
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: bloom-gateway
spec:
  replicas: 2
  podManagementPolicy: Parallel
  updateStrategy:
    rollingUpdate:
      partition: 0
  serviceName: enterprise-logs-bloom-gateway-headless
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: enterprise-logs
      app.kubernetes.io/instance: enterprise-logs
      app.kubernetes.io/component: bloom-gateway
  template:
    metadata:
      annotations:
        checksum/config: d14c236145af3218e02fe7afb1c2da5ecb71e18d152f4d92f607f52fda437995
      labels:
        app.kubernetes.io/name: enterprise-logs
        app.kubernetes.io/instance: enterprise-logs
        app.kubernetes.io/component: bloom-gateway
        app.kubernetes.io/part-of: memberlist
    spec:
      serviceAccountName: enterprise-logs
      
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 30
      containers:
        - name: bloom-gateway
          image: docker.io/grafana/enterprise-logs:3.3.0
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/loki/config/config.yaml
            - -target=bloom-gateway
            - -config.expand-env=true
            - -log-config-reverse-order
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: http-memberlist
              containerPort: 7946
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 30
            timeoutSeconds: 1
          volumeMounts:
            - name: temp
              mountPath: /tmp
            - name: config
              mountPath: /etc/loki/config
            - name: runtime-config
              mountPath: /etc/loki/runtime-config
            - name: data
              mountPath: /var/loki
            - name: license
              mountPath: /etc/loki/license
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/component: bloom-gateway
            topologyKey: kubernetes.io/hostname
      volumes:
        - name: temp
          emptyDir: {}
        - name: config
          configMap:
            name: enterprise-logs
            items:
              - key: "config.yaml"
                path: "config.yaml"
        - name: runtime-config
          configMap:
            name: enterprise-logs-runtime
        - name: license
          secret:
            secretName: gel-license
        - name: data
          emptyDir: {}
---
# Source: loki/templates/bloom-planner/statefulset-bloom-planner.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: enterprise-logs-bloom-planner
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: bloom-planner
spec:
  replicas: 2
  podManagementPolicy: Parallel
  updateStrategy:
    rollingUpdate:
      partition: 0
  serviceName: enterprise-logs-bloom-planner-headless
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: enterprise-logs
      app.kubernetes.io/instance: enterprise-logs
      app.kubernetes.io/component: bloom-planner
  template:
    metadata:
      annotations:
        checksum/config: d14c236145af3218e02fe7afb1c2da5ecb71e18d152f4d92f607f52fda437995
      labels:
        app.kubernetes.io/name: enterprise-logs
        app.kubernetes.io/instance: enterprise-logs
        app.kubernetes.io/component: bloom-planner
        app.kubernetes.io/part-of: memberlist
    spec:
      serviceAccountName: enterprise-logs
      
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 30
      containers:
        - name: bloom-planner
          image: docker.io/grafana/enterprise-logs:3.3.0
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/loki/config/config.yaml
            - -target=bloom-planner
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: http-memberlist
              containerPort: 7946
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 30
            timeoutSeconds: 1
          volumeMounts:
            - name: temp
              mountPath: /tmp
            - name: config
              mountPath: /etc/loki/config
            - name: runtime-config
              mountPath: /etc/loki/runtime-config
            - name: data
              mountPath: /var/loki
            - name: license
              mountPath: /etc/loki/license
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/component: bloom-planner
            topologyKey: kubernetes.io/hostname
      volumes:
        - name: temp
          emptyDir: {}
        - name: config
          configMap:
            name: enterprise-logs
            items:
              - key: "config.yaml"
                path: "config.yaml"
        - name: runtime-config
          configMap:
            name: enterprise-logs-runtime
        - name: license
          secret:
            secretName: gel-license
        - name: data
          emptyDir: {}
---
# Source: loki/templates/chunks-cache/statefulset-chunks-cache.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: enterprise-logs-chunks-cache
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: "memcached-chunks-cache"
    name: "memcached-chunks-cache"
  annotations:
    {}
  namespace: "logs"
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: enterprise-logs
      app.kubernetes.io/instance: enterprise-logs
      app.kubernetes.io/component: "memcached-chunks-cache"
      name: "memcached-chunks-cache"
  updateStrategy:
    type: RollingUpdate
  serviceName: enterprise-logs-chunks-cache

  template:
    metadata:
      labels:
        app.kubernetes.io/name: enterprise-logs
        app.kubernetes.io/instance: enterprise-logs
        app.kubernetes.io/component: "memcached-chunks-cache"
        name: "memcached-chunks-cache"
      annotations:

    spec:
      serviceAccountName: enterprise-logs
      securityContext:
        fsGroup: 11211
        runAsGroup: 11211
        runAsNonRoot: true
        runAsUser: 11211
      initContainers:
        []
      nodeSelector:
        {}
      affinity:
        {}
      topologySpreadConstraints:
        []
      tolerations:
        []
      terminationGracePeriodSeconds: 60
      containers:
        - name: memcached
          image: memcached:1.6.33-alpine
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              memory: 9830Mi
            requests:
              cpu: 500m
              memory: 9830Mi
          ports:
            - containerPort: 11211
              name: client
          args:
            - -m 8192
            - --extended=modern,track_sizes
            - -I 5m
            - -c 16384
            - -v
            - -u 11211
          env:
          envFrom:
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
        - name: exporter
          image: prom/memcached-exporter:v0.15.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9150
              name: http-metrics
          args:
            - "--memcached.address=localhost:11211"
            - "--web.listen-address=0.0.0.0:9150"
          resources:
            limits: {}
            requests: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
---
# Source: loki/templates/compactor/statefulset-compactor.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: enterprise-logs-compactor
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: compactor
    app.kubernetes.io/part-of: memberlist
spec:
  replicas: 2
  podManagementPolicy: Parallel
  updateStrategy:
    rollingUpdate:
      partition: 0
  serviceName: enterprise-logs-compactor-headless
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: enterprise-logs
      app.kubernetes.io/instance: enterprise-logs
      app.kubernetes.io/component: compactor
  template:
    metadata:
      annotations:
        checksum/config: d14c236145af3218e02fe7afb1c2da5ecb71e18d152f4d92f607f52fda437995
      labels:
        app.kubernetes.io/name: enterprise-logs
        app.kubernetes.io/instance: enterprise-logs
        app.kubernetes.io/component: compactor
        app.kubernetes.io/part-of: memberlist
    spec:
      serviceAccountName: enterprise-logs
      
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 30
      containers:
        - name: compactor
          image: docker.io/grafana/enterprise-logs:3.3.0
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/loki/config/config.yaml
            - -target=compactor
            - -config.expand-env=true
            - -log-config-reverse-order
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: http-memberlist
              containerPort: 7946
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 30
            timeoutSeconds: 1
          
          volumeMounts:
            - name: temp
              mountPath: /tmp
            - name: config
              mountPath: /etc/loki/config
            - name: runtime-config
              mountPath: /etc/loki/runtime-config
            - name: data
              mountPath: /var/loki
            - name: license
              mountPath: /etc/loki/license
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/component: compactor
            topologyKey: kubernetes.io/hostname
      volumes:
        - name: temp
          emptyDir: {}
        - name: config
          configMap:
            name: enterprise-logs
            items:
              - key: "config.yaml"
                path: "config.yaml"
        - name: runtime-config
          configMap:
            name: enterprise-logs-runtime
        - name: license
          secret:
            secretName: gel-license
        - name: data
          emptyDir: {}
---
# Source: loki/templates/index-gateway/statefulset-index-gateway.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: enterprise-logs-index-gateway
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: index-gateway
spec:
  replicas: 2
  updateStrategy:
    type: RollingUpdate
  serviceName: enterprise-logs-index-gateway-headless
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: enterprise-logs
      app.kubernetes.io/instance: enterprise-logs
      app.kubernetes.io/component: index-gateway
  template:
    metadata:
      annotations:
        checksum/config: d14c236145af3218e02fe7afb1c2da5ecb71e18d152f4d92f607f52fda437995
      labels:
        app.kubernetes.io/name: enterprise-logs
        app.kubernetes.io/instance: enterprise-logs
        app.kubernetes.io/component: index-gateway
        app.kubernetes.io/part-of: memberlist
    spec:
      serviceAccountName: enterprise-logs
      
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 300
      containers:
        - name: index-gateway
          image: docker.io/grafana/enterprise-logs:3.3.0
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/loki/config/config.yaml
            - -target=index-gateway
            - -config.expand-env=true
            - -log-config-reverse-order
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: http-memberlist
              containerPort: 7946
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 30
            timeoutSeconds: 1
          livenessProbe:
            null
          volumeMounts:
            - name: config
              mountPath: /etc/loki/config
            - name: runtime-config
              mountPath: /etc/loki/runtime-config
            - name: data
              mountPath: /var/loki
            - name: license
              mountPath: /etc/loki/license
          resources:
            limits:
              memory: 1Gi
            requests:
              cpu: 500m
              memory: 1Gi
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/component: index-gateway
            topologyKey: kubernetes.io/hostname
      volumes:
        - name: config
          configMap:
            name: enterprise-logs
            items:
              - key: "config.yaml"
                path: "config.yaml"
        - name: runtime-config
          configMap:
            name: enterprise-logs-runtime
        - name: license
          secret:
            secretName: gel-license
        - name: data
          emptyDir: {}
---
# Source: loki/templates/ingester/statefulset-ingester.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: enterprise-logs-ingester
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: ingester
    app.kubernetes.io/part-of: memberlist
spec:
  replicas: 3
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  serviceName: enterprise-logs-ingester-headless
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: enterprise-logs
      app.kubernetes.io/instance: enterprise-logs
      app.kubernetes.io/component: ingester
  template:
    metadata:
      annotations:
        checksum/config: d14c236145af3218e02fe7afb1c2da5ecb71e18d152f4d92f607f52fda437995
      labels:
        app.kubernetes.io/name: enterprise-logs
        app.kubernetes.io/instance: enterprise-logs
        app.kubernetes.io/component: ingester
        app.kubernetes.io/part-of: memberlist
    spec:
      topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              app.kubernetes.io/component: ingester
          maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
      serviceAccountName: enterprise-logs
      
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 300
      containers:
        - name: ingester
          image: docker.io/grafana/enterprise-logs:3.3.0
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/loki/config/config.yaml
            - -ingester.availability-zone=zone-default
            - -target=ingester
            - -config.expand-env=true
            - -log-config-reverse-order
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: http-memberlist
              containerPort: 7946
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 30
            timeoutSeconds: 1
          
          volumeMounts:
            - name: config
              mountPath: /etc/loki/config
            - name: runtime-config
              mountPath: /etc/loki/runtime-config
            - name: data
              mountPath: /var/loki
            - name: license
              mountPath: /etc/loki/license
          resources:
            limits:
              memory: 1Gi
            requests:
              cpu: 500m
              memory: 1Gi
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/component: ingester
            topologyKey: kubernetes.io/hostname
      volumes:
        - name: config
          configMap:
            name: enterprise-logs
            items:
              - key: "config.yaml"
                path: "config.yaml"
        - name: runtime-config
          configMap:
            name: enterprise-logs-runtime
        - name: license
          secret:
            secretName: gel-license
        - name: data
          emptyDir: { }
---
# Source: loki/templates/pattern-ingester/statefulset-pattern-ingester.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: enterprise-logs-pattern-ingester
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: pattern-ingester
spec:
  replicas: 2
  podManagementPolicy: Parallel
  updateStrategy:
    rollingUpdate:
      partition: 0
  serviceName: enterprise-logs-pattern-ingester-headless
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: enterprise-logs
      app.kubernetes.io/instance: enterprise-logs
      app.kubernetes.io/component: pattern-ingester
  template:
    metadata:
      annotations:
        checksum/config: d14c236145af3218e02fe7afb1c2da5ecb71e18d152f4d92f607f52fda437995
      labels:
        app.kubernetes.io/name: enterprise-logs
        app.kubernetes.io/instance: enterprise-logs
        app.kubernetes.io/component: pattern-ingester
        app.kubernetes.io/part-of: memberlist
    spec:
      serviceAccountName: enterprise-logs
      
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 30
      containers:
        - name: pattern-ingester
          image: docker.io/grafana/enterprise-logs:3.3.0
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/loki/config/config.yaml
            - -target=pattern-ingester
            - -config.expand-env=true
            - -log-config-reverse-order
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: http-memberlist
              containerPort: 7946
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 30
            timeoutSeconds: 1
          volumeMounts:
            - name: temp
              mountPath: /tmp
            - name: config
              mountPath: /etc/loki/config
            - name: runtime-config
              mountPath: /etc/loki/runtime-config
            - name: data
              mountPath: /var/loki
            - name: license
              mountPath: /etc/loki/license
          resources:
            limits:
              memory: 1Gi
            requests:
              cpu: 500m
              memory: 1Gi
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/component: pattern-ingester
            topologyKey: kubernetes.io/hostname
      volumes:
        - name: temp
          emptyDir: {}
        - name: config
          configMap:
            name: enterprise-logs
            items:
              - key: "config.yaml"
                path: "config.yaml"
        - name: runtime-config
          configMap:
            name: enterprise-logs-runtime
        - name: license
          secret:
            secretName: gel-license
        - name: data
          emptyDir: {}
---
# Source: loki/templates/results-cache/statefulset-results-cache.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: enterprise-logs-results-cache
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: "memcached-results-cache"
    name: "memcached-results-cache"
  annotations:
    {}
  namespace: "logs"
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: enterprise-logs
      app.kubernetes.io/instance: enterprise-logs
      app.kubernetes.io/component: "memcached-results-cache"
      name: "memcached-results-cache"
  updateStrategy:
    type: RollingUpdate
  serviceName: enterprise-logs-results-cache

  template:
    metadata:
      labels:
        app.kubernetes.io/name: enterprise-logs
        app.kubernetes.io/instance: enterprise-logs
        app.kubernetes.io/component: "memcached-results-cache"
        name: "memcached-results-cache"
      annotations:

    spec:
      serviceAccountName: enterprise-logs
      securityContext:
        fsGroup: 11211
        runAsGroup: 11211
        runAsNonRoot: true
        runAsUser: 11211
      initContainers:
        []
      nodeSelector:
        {}
      affinity:
        {}
      topologySpreadConstraints:
        []
      tolerations:
        []
      terminationGracePeriodSeconds: 60
      containers:
        - name: memcached
          image: memcached:1.6.33-alpine
          imagePullPolicy: IfNotPresent
          resources:
            limits:
              memory: 1229Mi
            requests:
              cpu: 500m
              memory: 1229Mi
          ports:
            - containerPort: 11211
              name: client
          args:
            - -m 1024
            - --extended=modern,track_sizes
            - -I 5m
            - -c 16384
            - -v
            - -u 11211
          env:
          envFrom:
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
        - name: exporter
          image: prom/memcached-exporter:v0.15.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9150
              name: http-metrics
          args:
            - "--memcached.address=localhost:11211"
            - "--web.listen-address=0.0.0.0:9150"
          resources:
            limits: {}
            requests: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
---
# Source: loki/templates/ruler/statefulset-ruler.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: enterprise-logs-ruler
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: ruler
    app.kubernetes.io/part-of: memberlist
spec:
  replicas: 1
  revisionHistoryLimit: 10
  serviceName: enterprise-logs-ruler
  selector:
    matchLabels:
      app.kubernetes.io/name: enterprise-logs
      app.kubernetes.io/instance: enterprise-logs
      app.kubernetes.io/component: ruler
  template:
    metadata:
      annotations:
        checksum/config: d14c236145af3218e02fe7afb1c2da5ecb71e18d152f4d92f607f52fda437995
      labels:
        app.kubernetes.io/name: enterprise-logs
        app.kubernetes.io/instance: enterprise-logs
        app.kubernetes.io/component: ruler
        app.kubernetes.io/part-of: memberlist
    spec:
      serviceAccountName: enterprise-logs
      
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      terminationGracePeriodSeconds: 300
      containers:
        - name: ruler
          image: docker.io/grafana/enterprise-logs:3.3.0
          imagePullPolicy: IfNotPresent
          args:
            - -config.file=/etc/loki/config/config.yaml
            - -target=ruler
            - -config.expand-env=true
            - -log-config-reverse-order
          ports:
            - name: http-metrics
              containerPort: 3100
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: http-memberlist
              containerPort: 7946
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 30
            timeoutSeconds: 1
          volumeMounts:
            - name: config
              mountPath: /etc/loki/config
            - name: runtime-config
              mountPath: /etc/loki/runtime-config
            - name: data
              mountPath: /var/loki
            - name: tmp
              mountPath: /tmp/loki
            - name: license
              mountPath: /etc/loki/license
          resources:
            limits:
              memory: 1Gi
            requests:
              cpu: 500m
              memory: 1Gi
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app.kubernetes.io/component: ruler
            topologyKey: kubernetes.io/hostname
      volumes:
        - name: config
          configMap:
            name: enterprise-logs
            items:
              - key: "config.yaml"
                path: "config.yaml"
        - name: runtime-config
          configMap:
            name: enterprise-logs-runtime
        - name: license
          secret:
            secretName: gel-license
        - name: tmp
          emptyDir: {}
        - name: data
          emptyDir: {}
---
# Source: loki/templates/tokengen/serviceaccount-tokengen.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: enterprise-logs-tokengen
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: tokengen
  annotations:
    "helm.sh/hook": post-install
---
# Source: loki/templates/tokengen/clusterrole-tokengen.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: enterprise-logs-tokengen
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: tokengen
  annotations:
    "helm.sh/hook": post-install
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["create", "get", "patch"]
---
# Source: loki/templates/tokengen/clusterrolebinding-tokengen.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: enterprise-logs-tokengen
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: tokengen
  annotations:
    "helm.sh/hook": post-install
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: enterprise-logs-tokengen
subjects:
  - kind: ServiceAccount
    name: enterprise-logs-tokengen
    namespace: logs
---
# Source: loki/templates/tokengen/job-tokengen.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: enterprise-logs-tokengen
  namespace: logs
  labels:
    helm.sh/chart: loki-6.24.0
    app.kubernetes.io/name: enterprise-logs
    app.kubernetes.io/instance: enterprise-logs
    app.kubernetes.io/version: "3.3.2"
    app.kubernetes.io/component: tokengen
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "10"
spec:
  backoffLimit: 6
  completions: 1
  parallelism: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: enterprise-logs
        app.kubernetes.io/instance: enterprise-logs
        app.kubernetes.io/component: tokengen
      annotations:
    spec:
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      initContainers:
        - name: loki
          image: docker.io/grafana/enterprise-logs:3.3.0
          imagePullPolicy: IfNotPresent
          args:
            # The shared emptyDir exists only while the job is running, and is deleted once the job is completed.
            # The tokengen generates a new admin token in case the 'token-file' file doesn't exist.
            # As a result, subsequent executions of this tokengen job will generate new admin tokens.
            # Note that previously generated tokens remain valid, as these remain present in the object storage.
            - -config.file=/etc/loki/config/config.yaml
            - -target=tokengen
            - -tokengen.token-file=/shared/admin-token
            - -config.expand-env=true
            - -log-config-reverse-order
          volumeMounts:
            - name: shared
              mountPath: /shared
            - name: config
              mountPath: /etc/loki/config
            - name: runtime-config
              mountPath: /etc/loki/runtime-config
            - name: license
              mountPath: /etc/loki/license
          env:
      containers:
        - name: create-secret
          image: docker.io/bitnami/kubectl:latest
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -euc
            - |
              # Create or update admin token secrets generated by tokengen job
              kubectl create secret generic "enterprise-logs-admin-token" \
                --from-file=token=/shared/admin-token \
                --dry-run=client -o yaml \
                | kubectl apply -f -
          volumeMounts:
            - name: shared
              mountPath: /shared
            - name: config
              mountPath: /etc/loki/config
            - name: license
              mountPath: /etc/loki/license
      restartPolicy: OnFailure
      serviceAccount: enterprise-logs-tokengen
      serviceAccountName: enterprise-logs-tokengen
      volumes:
        - name: config
          configMap:
            name: enterprise-logs
            items:
              - key: "config.yaml"
                path: "config.yaml"
        - name: runtime-config
          configMap:
            name: enterprise-logs-runtime
        - name: license
          secret:
            secretName: gel-license
        - name: shared
          emptyDir: {}
