local g = import './lib/grafana.libsonnet';

{
  // The Main Folder to Create Dashboards in
  folder: 'Loki',

  // a slug of the folder name, must be url friendly
  // keeps only alphanumeric characters, spaces are replaced with dashes
  folder_slug: g.util.string.slugify(self.folder),

  // Whether or not dashboards should be created in sub-folders
  // sub_folders: true,

  // Tags for dashboards.
  tags: [
    'loki',
    'loki-mixin',
  ],

  // the tags to use for autogenerated dashboard links
  link_tags: [
    'loki',
    'loki-mixin',
  ],

  // whether or not the dashboards should be editable
  editable: true,

  // the group the label to use
  group_label: 'group',

  // a regular expression to exclude groups by i.e. 'test|staging'
  group_exclusions: '',

  // group
  group_types: [
    'region',
    'cluster',
    'dataset',
    'env',
    'squad',
  ],

  // overview configuration
  overview: {
    color: 'green',
    textColor: 'text',
    metric_names: {
      instance_info: 'grafanacloud_instance_info',
      org_total_overage: 'grafanacloud_org_total_overage',
      org_spend_commit_credit_total: 'grafanacloud_org_spend_commit_credit_total',
      org_spend_commit_balance_total: 'grafanacloud_org_spend_commit_balance_total',
    },
  },

  adminApi: {
    enabled: true,
  },

  bloomBuilder: {
    enabled: true,
  },

  bloomGateway: {
    enabled: true,
  },

  bloomPlanner: {
    enabled: true,
  },

  compactor: {
    enabled: true,
  },

  distributor: {
    enabled: true,
  },

  gateway: {
    enabled: true,
  },

  indexGateway: {
    enabled: true,
  },

  ingester: {
    enabled: true,
  },

  patternIngester: {
    enabled: true,
  },

  querier: {
    enabled: true,
  },

  queryFrontend: {
    enabled: true,
  },

  queryScheduler: {
    enabled: true,
  },

  ruler: {
    enabled: true,
  },

  // The label used to identify resources (pods/components)
  labels: {
    // The label used to identify the cluster
    cluster: 'cluster',

    // The label used to identify the namespace
    namespace: 'namespace',

    // The label used to identify the resource (pod/component)
    resource_selector: 'component',
  },

  selectors: {
    // The selector to use for filtering metric/log queries on log-level, i.e. level="info" or debug!="true"
    log_level: 'level="info"',
  },

  // whether or not to use recording rules in the dashboard queries or the original query
  use_recording_rules: true,
}
