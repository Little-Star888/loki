local g = import './lib/grafana.libsonnet';

{
  // The Main Folder to Create Dashboards in
  folder: 'Loki',

  // a slug of the folder name, must be url friendly
  // keeps only alphanumeric characters, spaces are replaced with dashes
  folder_slug: g.util.string.slugify(self.folder),

  // Whether or not dashboards should be created in sub-folders
  // sub_folders: true,

  // Tags for dashboards.
  tags: [
    'loki',
    'loki-mixin',
  ],

  // the tags to use for autogenerated dashboard links
  link_tags: [
    'loki',
    'loki-mixin',
  ],

  // whether or not the dashboards should be editable
  editable: true,

  components: {
    // TODO: define additional fields for each component: path or paths?
    adminApi: {
      enabled: true,
      component: 'admin-api',
      routes: '',
    },

    bloomBuilder: {
      enabled: true,
      component: 'bloom-builder',
      routes: '',
    },

    bloomGateway: {
      enabled: true,
      component: 'bloom-gateway',
      routes: '',
    },

    bloomPlanner: {
      enabled: true,
      component: 'bloom-planner',
      routes: '',
    },

    compactor: {
      enabled: true,
      component: 'compactor',
      routes: '',
    },

    distributor: {
      enabled: true,
      component: 'distributor',
      routes: '',
    },

    gateway: {
      enabled: true,
      component: 'gateway',
      routes: '',
    },

    indexGateway: {
      enabled: true,
      component: 'index-gateway',
      routes: '(/base.Ruler/Rules|/indexgatewaypb.IndexGateway/GetChunkRef|/indexgatewaypb.IndexGateway/GetSeries|/indexgatewaypb.IndexGateway/GetShards|/indexgatewaypb.IndexGateway/GetStats|/indexgatewaypb.IndexGateway/GetVolume|/indexgatewaypb.IndexGateway/LabelNamesForMetricName|/indexgatewaypb.IndexGateway/LabelValuesForMetricName|/indexgatewaypb.IndexGateway/QueryIndex|/logproto.BloomGateway/FilterChunkRefs|/logproto.Pattern/Query|/logproto.Querier/GetChunkIDs|/logproto.Querier/GetDetectedLabels|/logproto.Querier/GetStats|/logproto.Querier/GetVolume|/logproto.Querier/Label|/logproto.Querier/Query|/logproto.Querier/QuerySample|/logproto.Querier/Series|/logproto.StreamData/GetStreamRates)',
    },

    ingester: {
      enabled: true,
      component: 'ingester',
      routes: '(/base.Ruler/Rules|/indexgatewaypb.IndexGateway/GetChunkRef|/indexgatewaypb.IndexGateway/GetSeries|/indexgatewaypb.IndexGateway/GetShards|/indexgatewaypb.IndexGateway/GetStats|/indexgatewaypb.IndexGateway/GetVolume|/indexgatewaypb.IndexGateway/LabelNamesForMetricName|/indexgatewaypb.IndexGateway/LabelValuesForMetricName|/indexgatewaypb.IndexGateway/QueryIndex|/logproto.BloomGateway/FilterChunkRefs|/logproto.Pattern/Query|/logproto.Querier/GetChunkIDs|/logproto.Querier/GetDetectedLabels|/logproto.Querier/GetStats|/logproto.Querier/GetVolume|/logproto.Querier/Label|/logproto.Querier/Query|/logproto.Querier/QuerySample|/logproto.Querier/Series|/logproto.StreamData/GetStreamRates)'
    },

    patternIngester: {
      enabled: true,
      component: 'pattern-ingester',
      routes: '',
    },

    querier: {
      enabled: true,
      component: 'querier',
      routes: '(api_prom_rules|api_prom_rules_namespace_groupname|api_v1_rules|loki_api_v1_delete|loki_api_v1_detected_labels|loki_api_v1_index_stats|loki_api_v1_index_volume|loki_api_v1_index_volume_range|loki_api_v1_label_name_values|loki_api_v1_label_values|loki_api_v1_labels|loki_api_v1_patterns|loki_api_v1_query|loki_api_v1_query_range|loki_api_v1_series|prometheus_api_v1_rules)',
    },

    queryFrontend: {
      enabled: true,
      component: 'query-frontend',
      routes: '(api_prom_rules|api_prom_rules_namespace_groupname|api_v1_rules|loki_api_v1_delete|loki_api_v1_detected_labels|loki_api_v1_index_stats|loki_api_v1_index_volume|loki_api_v1_index_volume_range|loki_api_v1_label_name_values|loki_api_v1_label_values|loki_api_v1_labels|loki_api_v1_patterns|loki_api_v1_query|loki_api_v1_query_range|loki_api_v1_series|prometheus_api_v1_rules)'
    },

    queryScheduler: {
      enabled: true,
      component: 'query-scheduler',
      routes: '',
    },

    ruler: {
      enabled: true,
      component: 'ruler',
      routes: '(/base.Ruler/Rules|/indexgatewaypb.IndexGateway/GetChunkRef|/indexgatewaypb.IndexGateway/GetSeries|/indexgatewaypb.IndexGateway/GetShards|/indexgatewaypb.IndexGateway/GetStats|/indexgatewaypb.IndexGateway/GetVolume|/indexgatewaypb.IndexGateway/LabelNamesForMetricName|/indexgatewaypb.IndexGateway/LabelValuesForMetricName|/indexgatewaypb.IndexGateway/QueryIndex|/logproto.BloomGateway/FilterChunkRefs|/logproto.Pattern/Query|/logproto.Querier/GetChunkIDs|/logproto.Querier/GetDetectedLabels|/logproto.Querier/GetStats|/logproto.Querier/GetVolume|/logproto.Querier/Label|/logproto.Querier/Query|/logproto.Querier/QuerySample|/logproto.Querier/Series|/logproto.StreamData/GetStreamRates)',
    }
  },

  // The label used to identify resources (pods/components)
  labels: {
    // The label used to identify the cluster
    cluster: 'cluster',

    // The label used to identify the namespace
    namespace: 'namespace',

    // The label used to identify the resource (pod/component)
    resource_selector: 'component',
  },

  selectors: {
    // The selector to use for filtering metric/log queries on log-level, i.e. level="info" or debug!="true"
    log_level: 'level="info"',
  },

  // whether or not to use recording rules in the dashboard queries or the original query
  use_recording_rules: true,
}
