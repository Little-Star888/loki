// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/logproto/usage.proto

package logproto

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StreamUsage struct {
	Labels                 string `protobuf:"bytes,1,opt,name=labels,proto3" json:"labels,omitempty"`
	Hash                   uint64 `protobuf:"varint,2,opt,name=hash,proto3" json:"hash,omitempty"`
	LineSize               uint64 `protobuf:"varint,3,opt,name=line_size,json=lineSize,proto3" json:"line_size,omitempty"`
	StructuredMetadataSize uint64 `protobuf:"varint,4,opt,name=structured_metadata_size,json=structuredMetadataSize,proto3" json:"structured_metadata_size,omitempty"`
}

func (m *StreamUsage) Reset()      { *m = StreamUsage{} }
func (*StreamUsage) ProtoMessage() {}
func (*StreamUsage) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b9119162a5e20cc, []int{0}
}
func (m *StreamUsage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamUsage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamUsage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamUsage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamUsage.Merge(m, src)
}
func (m *StreamUsage) XXX_Size() int {
	return m.Size()
}
func (m *StreamUsage) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamUsage.DiscardUnknown(m)
}

var xxx_messageInfo_StreamUsage proto.InternalMessageInfo

func (m *StreamUsage) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *StreamUsage) GetHash() uint64 {
	if m != nil {
		return m.Hash
	}
	return 0
}

func (m *StreamUsage) GetLineSize() uint64 {
	if m != nil {
		return m.LineSize
	}
	return 0
}

func (m *StreamUsage) GetStructuredMetadataSize() uint64 {
	if m != nil {
		return m.StructuredMetadataSize
	}
	return 0
}

func init() {
	proto.RegisterType((*StreamUsage)(nil), "logproto.StreamUsage")
}

func init() { proto.RegisterFile("pkg/logproto/usage.proto", fileDescriptor_6b9119162a5e20cc) }

var fileDescriptor_6b9119162a5e20cc = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x6e, 0xc2, 0x30,
	0x14, 0x45, 0xfd, 0xda, 0x08, 0x81, 0xbb, 0x59, 0x15, 0x8a, 0x40, 0x7a, 0x42, 0x5d, 0xca, 0x84,
	0x07, 0x96, 0xce, 0xdd, 0xbb, 0x80, 0xba, 0x54, 0xaa, 0xd0, 0x0b, 0xb8, 0x4e, 0x44, 0x82, 0x51,
	0xe2, 0x74, 0x60, 0xea, 0x27, 0xf0, 0x19, 0xfd, 0x94, 0x8e, 0x19, 0x19, 0x1b, 0x67, 0xe9, 0xc8,
	0x27, 0x54, 0x49, 0x40, 0x2d, 0x93, 0x8f, 0xef, 0xb9, 0xd7, 0x83, 0xb9, 0xbf, 0x5d, 0x6b, 0x19,
	0x1b, 0xbd, 0x4d, 0x8d, 0x35, 0x32, 0xcf, 0x48, 0xab, 0x49, 0xc3, 0xa2, 0x7b, 0x4e, 0x07, 0xb7,
	0xda, 0x68, 0xd3, 0x16, 0x6a, 0x6a, 0xfd, 0x60, 0x78, 0xb1, 0x3c, 0x43, 0x2b, 0xef, 0xf6, 0xc0,
	0x6f, 0xe6, 0x36, 0x55, 0x94, 0x3c, 0xd7, 0x4f, 0x8a, 0x3e, 0xef, 0xc4, 0x14, 0xa8, 0x38, 0xf3,
	0x61, 0x04, 0xe3, 0xde, 0xec, 0x74, 0x13, 0x82, 0x7b, 0x21, 0x65, 0xa1, 0x7f, 0x35, 0x82, 0xb1,
	0x37, 0x6b, 0x58, 0x0c, 0x79, 0x2f, 0x8e, 0x36, 0x6a, 0x91, 0x45, 0x3b, 0xe5, 0x5f, 0x37, 0xa2,
	0x5b, 0x07, 0xf3, 0x68, 0xa7, 0xc4, 0x03, 0xf7, 0x33, 0x9b, 0xe6, 0x4b, 0x9b, 0xa7, 0x6a, 0xb5,
	0x48, 0x94, 0xa5, 0x15, 0x59, 0x6a, 0xbb, 0x5e, 0xd3, 0xed, 0xff, 0xf9, 0xa7, 0x93, 0xae, 0x97,
	0x8f, 0xaf, 0x45, 0x89, 0xec, 0x50, 0x22, 0x3b, 0x96, 0x08, 0x1f, 0x0e, 0xe1, 0xd3, 0x21, 0x7c,
	0x39, 0x84, 0xc2, 0x21, 0x7c, 0x3b, 0x84, 0x1f, 0x87, 0xec, 0xe8, 0x10, 0xf6, 0x15, 0xb2, 0xa2,
	0x42, 0x76, 0xa8, 0x90, 0xbd, 0xdc, 0xeb, 0xc8, 0x86, 0x79, 0x30, 0x59, 0x9a, 0x44, 0xea, 0x94,
	0xde, 0x68, 0x43, 0x32, 0x36, 0xeb, 0x48, 0xbe, 0x4f, 0xe5, 0xff, 0x0f, 0x08, 0x3a, 0xcd, 0x31,
	0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xc1, 0xe2, 0xb6, 0x47, 0x51, 0x01, 0x00, 0x00,
}

func (this *StreamUsage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StreamUsage)
	if !ok {
		that2, ok := that.(StreamUsage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Labels != that1.Labels {
		return false
	}
	if this.Hash != that1.Hash {
		return false
	}
	if this.LineSize != that1.LineSize {
		return false
	}
	if this.StructuredMetadataSize != that1.StructuredMetadataSize {
		return false
	}
	return true
}
func (this *StreamUsage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&logproto.StreamUsage{")
	s = append(s, "Labels: "+fmt.Sprintf("%#v", this.Labels)+",\n")
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	s = append(s, "LineSize: "+fmt.Sprintf("%#v", this.LineSize)+",\n")
	s = append(s, "StructuredMetadataSize: "+fmt.Sprintf("%#v", this.StructuredMetadataSize)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringUsage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *StreamUsage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamUsage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamUsage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StructuredMetadataSize != 0 {
		i = encodeVarintUsage(dAtA, i, uint64(m.StructuredMetadataSize))
		i--
		dAtA[i] = 0x20
	}
	if m.LineSize != 0 {
		i = encodeVarintUsage(dAtA, i, uint64(m.LineSize))
		i--
		dAtA[i] = 0x18
	}
	if m.Hash != 0 {
		i = encodeVarintUsage(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Labels) > 0 {
		i -= len(m.Labels)
		copy(dAtA[i:], m.Labels)
		i = encodeVarintUsage(dAtA, i, uint64(len(m.Labels)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintUsage(dAtA []byte, offset int, v uint64) int {
	offset -= sovUsage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StreamUsage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Labels)
	if l > 0 {
		n += 1 + l + sovUsage(uint64(l))
	}
	if m.Hash != 0 {
		n += 1 + sovUsage(uint64(m.Hash))
	}
	if m.LineSize != 0 {
		n += 1 + sovUsage(uint64(m.LineSize))
	}
	if m.StructuredMetadataSize != 0 {
		n += 1 + sovUsage(uint64(m.StructuredMetadataSize))
	}
	return n
}

func sovUsage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUsage(x uint64) (n int) {
	return sovUsage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *StreamUsage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StreamUsage{`,
		`Labels:` + fmt.Sprintf("%v", this.Labels) + `,`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`LineSize:` + fmt.Sprintf("%v", this.LineSize) + `,`,
		`StructuredMetadataSize:` + fmt.Sprintf("%v", this.StructuredMetadataSize) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringUsage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *StreamUsage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamUsage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamUsage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LineSize", wireType)
			}
			m.LineSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LineSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StructuredMetadataSize", wireType)
			}
			m.StructuredMetadataSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StructuredMetadataSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUsage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUsage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUsage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUsage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUsage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUsage
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthUsage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUsage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUsage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthUsage
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUsage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUsage   = fmt.Errorf("proto: integer overflow")
)
