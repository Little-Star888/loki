// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/dataobj/internal/filemd/filemd.proto

package filemd

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SectionType int32

const (
	// SECTION_TYPE_UNSPECIFIED is an invalid section type.
	SECTION_TYPE_UNSPECIFIED SectionType = 0
	// SECTION_TYPE_STREAMS is a section containing log stream data.
	SECTION_TYPE_STREAMS SectionType = 1
)

var SectionType_name = map[int32]string{
	0: "SECTION_TYPE_UNSPECIFIED",
	1: "SECTION_TYPE_STREAMS",
}

var SectionType_value = map[string]int32{
	"SECTION_TYPE_UNSPECIFIED": 0,
	"SECTION_TYPE_STREAMS":     1,
}

func (SectionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fb808172f0bbbbfa, []int{0}
}

// Metadata of the data object.
type Metadata struct {
	// The list of sections stored within the data object. It is valid for there
	// to be multiple sections of the same type.
	Sections []*Section `protobuf:"bytes,1,rep,name=sections,proto3" json:"sections,omitempty"`
}

func (m *Metadata) Reset()      { *m = Metadata{} }
func (*Metadata) ProtoMessage() {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb808172f0bbbbfa, []int{0}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetSections() []*Section {
	if m != nil {
		return m.Sections
	}
	return nil
}

// Section within a data object.
type Section struct {
	// Type of the section within the data object.
	Type SectionType `protobuf:"varint,1,opt,name=type,proto3,enum=dataobj.metadata.file.v1.SectionType" json:"type,omitempty"`
	// Byte offset of the section's metadata from the start of the data object.
	MetadataOffset uint32 `protobuf:"varint,2,opt,name=metadata_offset,json=metadataOffset,proto3" json:"metadata_offset,omitempty"`
	// Size of the section's metadata in bytes.
	MetadataSize uint32 `protobuf:"varint,3,opt,name=metadata_size,json=metadataSize,proto3" json:"metadata_size,omitempty"`
}

func (m *Section) Reset()      { *m = Section{} }
func (*Section) ProtoMessage() {}
func (*Section) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb808172f0bbbbfa, []int{1}
}
func (m *Section) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Section) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Section.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Section) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Section.Merge(m, src)
}
func (m *Section) XXX_Size() int {
	return m.Size()
}
func (m *Section) XXX_DiscardUnknown() {
	xxx_messageInfo_Section.DiscardUnknown(m)
}

var xxx_messageInfo_Section proto.InternalMessageInfo

func (m *Section) GetType() SectionType {
	if m != nil {
		return m.Type
	}
	return SECTION_TYPE_UNSPECIFIED
}

func (m *Section) GetMetadataOffset() uint32 {
	if m != nil {
		return m.MetadataOffset
	}
	return 0
}

func (m *Section) GetMetadataSize() uint32 {
	if m != nil {
		return m.MetadataSize
	}
	return 0
}

func init() {
	proto.RegisterEnum("dataobj.metadata.file.v1.SectionType", SectionType_name, SectionType_value)
	proto.RegisterType((*Metadata)(nil), "dataobj.metadata.file.v1.Metadata")
	proto.RegisterType((*Section)(nil), "dataobj.metadata.file.v1.Section")
}

func init() {
	proto.RegisterFile("pkg/dataobj/internal/filemd/filemd.proto", fileDescriptor_fb808172f0bbbbfa)
}

var fileDescriptor_fb808172f0bbbbfa = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x28, 0xc8, 0x4e, 0xd7,
	0x4f, 0x49, 0x2c, 0x49, 0xcc, 0x4f, 0xca, 0xd2, 0xcf, 0xcc, 0x2b, 0x49, 0x2d, 0xca, 0x4b, 0xcc,
	0xd1, 0x4f, 0xcb, 0xcc, 0x49, 0xcd, 0x4d, 0x81, 0x52, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42,
	0x12, 0x50, 0x55, 0x7a, 0xb9, 0xa9, 0x25, 0x89, 0x20, 0xb6, 0x1e, 0x48, 0x5a, 0xaf, 0xcc, 0x50,
	0xc9, 0x93, 0x8b, 0xc3, 0x17, 0x2a, 0x26, 0x64, 0xcb, 0xc5, 0x51, 0x9c, 0x9a, 0x5c, 0x92, 0x99,
	0x9f, 0x57, 0x2c, 0xc1, 0xa8, 0xc0, 0xac, 0xc1, 0x6d, 0xa4, 0xa8, 0x87, 0x4b, 0xa3, 0x5e, 0x30,
	0x44, 0x65, 0x10, 0x5c, 0x8b, 0xd2, 0x24, 0x46, 0x2e, 0x76, 0xa8, 0xa8, 0x90, 0x25, 0x17, 0x4b,
	0x49, 0x65, 0x41, 0xaa, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x9f, 0x91, 0x2a, 0x41, 0x63, 0x42, 0x2a,
	0x0b, 0x52, 0x83, 0xc0, 0x5a, 0x84, 0xd4, 0xb9, 0xf8, 0x61, 0xaa, 0xe2, 0xf3, 0xd3, 0xd2, 0x8a,
	0x53, 0x4b, 0x24, 0x98, 0x14, 0x18, 0x35, 0x78, 0x83, 0xf8, 0x60, 0xc2, 0xfe, 0x60, 0x51, 0x21,
	0x65, 0x2e, 0x5e, 0xb8, 0xc2, 0xe2, 0xcc, 0xaa, 0x54, 0x09, 0x66, 0xb0, 0x32, 0x1e, 0x98, 0x60,
	0x70, 0x66, 0x55, 0xaa, 0x96, 0x2b, 0x17, 0x37, 0x92, 0x15, 0x42, 0x32, 0x5c, 0x12, 0xc1, 0xae,
	0xce, 0x21, 0x9e, 0xfe, 0x7e, 0xf1, 0x21, 0x91, 0x01, 0xae, 0xf1, 0xa1, 0x7e, 0xc1, 0x01, 0xae,
	0xce, 0x9e, 0x6e, 0x9e, 0xae, 0x2e, 0x02, 0x0c, 0x42, 0x12, 0x5c, 0x22, 0x28, 0xb2, 0xc1, 0x21,
	0x41, 0xae, 0x8e, 0xbe, 0xc1, 0x02, 0x8c, 0x4e, 0x99, 0x17, 0x1e, 0xca, 0x31, 0xdc, 0x78, 0x28,
	0xc7, 0xf0, 0xe1, 0xa1, 0x1c, 0x63, 0xc3, 0x23, 0x39, 0xc6, 0x15, 0x8f, 0xe4, 0x18, 0x4f, 0x3c,
	0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x17, 0x8f, 0xe4, 0x18, 0x3e,
	0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18,
	0xa2, 0x8c, 0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xd3, 0x8b, 0x12,
	0xd3, 0x12, 0xf3, 0x12, 0xf5, 0x73, 0xf2, 0xb3, 0x33, 0xf5, 0xf1, 0x44, 0x5c, 0x12, 0x1b, 0x38,
	0xca, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x86, 0x9e, 0x92, 0x3f, 0xde, 0x01, 0x00, 0x00,
}

func (x SectionType) String() string {
	s, ok := SectionType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Metadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Metadata)
	if !ok {
		that2, ok := that.(Metadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Sections) != len(that1.Sections) {
		return false
	}
	for i := range this.Sections {
		if !this.Sections[i].Equal(that1.Sections[i]) {
			return false
		}
	}
	return true
}
func (this *Section) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Section)
	if !ok {
		that2, ok := that.(Section)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.MetadataOffset != that1.MetadataOffset {
		return false
	}
	if this.MetadataSize != that1.MetadataSize {
		return false
	}
	return true
}
func (this *Metadata) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&filemd.Metadata{")
	if this.Sections != nil {
		s = append(s, "Sections: "+fmt.Sprintf("%#v", this.Sections)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Section) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&filemd.Section{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "MetadataOffset: "+fmt.Sprintf("%#v", this.MetadataOffset)+",\n")
	s = append(s, "MetadataSize: "+fmt.Sprintf("%#v", this.MetadataSize)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFilemd(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sections) > 0 {
		for iNdEx := len(m.Sections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFilemd(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Section) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Section) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Section) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MetadataSize != 0 {
		i = encodeVarintFilemd(dAtA, i, uint64(m.MetadataSize))
		i--
		dAtA[i] = 0x18
	}
	if m.MetadataOffset != 0 {
		i = encodeVarintFilemd(dAtA, i, uint64(m.MetadataOffset))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintFilemd(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFilemd(dAtA []byte, offset int, v uint64) int {
	offset -= sovFilemd(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sections) > 0 {
		for _, e := range m.Sections {
			l = e.Size()
			n += 1 + l + sovFilemd(uint64(l))
		}
	}
	return n
}

func (m *Section) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovFilemd(uint64(m.Type))
	}
	if m.MetadataOffset != 0 {
		n += 1 + sovFilemd(uint64(m.MetadataOffset))
	}
	if m.MetadataSize != 0 {
		n += 1 + sovFilemd(uint64(m.MetadataSize))
	}
	return n
}

func sovFilemd(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFilemd(x uint64) (n int) {
	return sovFilemd(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Metadata) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSections := "[]*Section{"
	for _, f := range this.Sections {
		repeatedStringForSections += strings.Replace(f.String(), "Section", "Section", 1) + ","
	}
	repeatedStringForSections += "}"
	s := strings.Join([]string{`&Metadata{`,
		`Sections:` + repeatedStringForSections + `,`,
		`}`,
	}, "")
	return s
}
func (this *Section) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Section{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`MetadataOffset:` + fmt.Sprintf("%v", this.MetadataOffset) + `,`,
		`MetadataSize:` + fmt.Sprintf("%v", this.MetadataSize) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFilemd(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilemd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilemd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilemd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilemd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sections = append(m.Sections, &Section{})
			if err := m.Sections[len(m.Sections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFilemd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFilemd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFilemd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Section) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilemd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Section: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Section: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilemd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= SectionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataOffset", wireType)
			}
			m.MetadataOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilemd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetadataOffset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataSize", wireType)
			}
			m.MetadataSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilemd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetadataSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFilemd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFilemd
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFilemd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFilemd(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFilemd
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFilemd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFilemd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFilemd
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthFilemd
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFilemd
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFilemd(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthFilemd
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFilemd = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFilemd   = fmt.Errorf("proto: integer overflow")
)
